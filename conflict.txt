name: Detect Merge/Rebase from Base Branch and Notify Teams

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  detect-conflict-merge-message:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch info
        id: vars
        run: |
          echo "BASE_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          echo "FEATURE_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
          BASE_COMMIT=$(git merge-base origin/main origin/${{ github.head_ref }})
          echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_ENV

      - name: List all commits from base to feature branch
        id: list_commits
        run: |
          echo "üîé All commits from common ancestor to feature branch:"
          git log --oneline $BASE_COMMIT..origin/$FEATURE_BRANCH

      - name: Detect merge commits from ${{ github.base_ref }} into feature
        id: detect
        run: |
          echo "üîç Checking for merges from $BASE_BRANCH into $FEATURE_BRANCH since $BASE_COMMIT..."

          MERGE_COMMITS=()
          MERGE_LIST=""

          for sha in $(git rev-list --merges $BASE_COMMIT..origin/$FEATURE_BRANCH); do
            second_parent=$(git rev-parse "$sha^2")
            if git merge-base --is-ancestor "$second_parent" origin/$BASE_BRANCH; then
              MERGE_COMMITS+=("$sha")
              entry=$(git show -s --format="‚Ä¢ %h | %an | %ad | %s" --date=short $sha)
              MERGE_LIST+="$entry\n"
            fi
          done

          if [ ${#MERGE_COMMITS[@]} -gt 0 ]; then
            echo "‚ùå Merge commit(s) from $BASE_BRANCH detected:"
            echo -e "$MERGE_LIST"

            FIRST_SHA="${MERGE_COMMITS[0]}"
            AUTHOR=$(git show -s --format="%an" $FIRST_SHA)
            DATE=$(git show

name: Detect Merge/Rebase from Base Branch and Notify Teams

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  detect-conflict-merge-message:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine merge commits after common ancestor
        id: detect
        run: |
          echo "üîç Checking for merge commits after common ancestor..."

          BASE_BRANCH="${{ github.base_ref }}"
          MAIN_BRANCH="main"
          HEAD_BRANCH="${{ github.head_ref }}"

          echo "Base: $MAIN_BRANCH"
          echo "Head: $HEAD_BRANCH"

          # Fetch both branches
          git fetch origin "$MAIN_BRANCH" "$HEAD_BRANCH"

          # Find common ancestor
          COMMON=$(git merge-base origin/"$MAIN_BRANCH" origin/"$HEAD_BRANCH")

          # Find merge commits
          MERGES=$(git log --merges --first-parent --pretty=format:"‚Ä¢ %h | %an | %ad | %s" --date=short "$COMMON..origin/$HEAD_BRANCH")

          # Extract details of first merge commit if any
          FIRST_SHA=$(git rev-list --merges --first-parent "$COMMON..origin/$HEAD_BRANCH" | head -n 1)

          if [ -n "$FIRST_SHA" ]; then
            AUTHOR=$(git show -s --format="%an" $FIRST_SHA)
            DATE=$(git show -s --format="%cI" $FIRST_SHA)
            PARENT1=$(git rev-parse "$FIRST_SHA^1")
            PARENT2=$(git rev-parse "$FIRST_SHA^2")
            MESSAGE=$(git show -s --format="%s" $FIRST_SHA)
            REPO_URL="https://github.com/${{ github.repository }}"
            COMMIT_URL="$REPO_URL/commit/$FIRST_SHA"
          fi

          {
            echo "merge_list<<EOF"
            echo "$MERGES"
            echo "EOF"
            echo "merge_commit=$FIRST_SHA"
            echo "merge_author=$AUTHOR"
            echo "merge_date=$DATE"
            echo "merge_message=$MESSAGE"
            echo "parent1=$PARENT1"
            echo "parent2=$PARENT2"
            echo "commit_url=$COMMIT_URL"
          } >> "$GITHUB_OUTPUT"

          # Commit list from ref branch
          COMMITS=$(git log --pretty=format:"‚Ä¢ %h | %an | %ad | %s" 2deb2e77ea4b0311c6d3645900cbedde3b1d89bd..origin/testing4)

          if [ -n "$MERGES" ]; then
            echo "‚ùå Merge commit(s) found:"
            echo "$MERGES" 
            
            echo "üìú DEBUG_INFO: Detailed commit history for origin/$HEAD_BRANCH:"
            echo "$COMMITS"
            exit 1
          else
            echo "‚úÖ No merge commits found on first-parent path after $COMMON."
          fi

          
      - name: Post PR comment if merge detected
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
          MERGE_INFO: ${{ steps.detect.outputs.merge_list }}
        run: |
          echo "üí¨ Posting comment to PR about invalid merge..."
          gh api -X POST /repos/$REPO/issues/$PR_NUMBER/comments \
            -f body="‚ùå **Error**: Merge commits from \`${{ github.base_ref }}\` were detected in this PR.Please reach out to Devopts team immediately before promoting the user story
      - name: Send Power Automate notification
        if: failure()
        env:
          POWER_WEBHOOK: ${{ secrets.POWER_AUTOMATE_WEBHOOK }}
          BASE: ${{ github.base_ref }}
          HEAD: ${{ github.head_ref }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          AUTHOR: ${{ github.event.pull_request.user.login }}
          MERGE_INFO: ${{ steps.detect.outputs.merge_list }}
          MERGE_COMMIT: ${{ steps.detect.outputs.merge_commit }}
          MERGE_AUTHOR: ${{ steps.detect.outputs.merge_author }}
          MERGE_DATE: ${{ steps.detect.outputs.merge_date }}
          MERGE_MESSAGE: ${{ steps.detect.outputs.merge_message }}
          PARENT1: ${{ steps.detect.outputs.parent1 }}
          PARENT2: ${{ steps.detect.outputs.parent2 }}
          COMMIT_URL: ${{ steps.detect.outputs.commit_url }}

        run: |
          echo "üì° Sending alert to Power Automate webhook..."

          curl -X POST "$POWER_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d "{
              \"author\": \"$AUTHOR\",
              \"base\": \"$BASE\",
              \"head\": \"$HEAD\",
              \"pr_url\": \"$PR_URL\",
              \"merge_info\": \"$MERGE_INFO\",
              \"merge_commit\": \"$MERGE_COMMIT\",
              \"merge_author\": \"$MERGE_AUTHOR\",
              \"merge_date\": \"$MERGE_DATE\",
              \"merge_message\": \"$MERGE_MESSAGE\",
              \"parent1\": \"$PARENT1\",
              \"parent2\": \"$PARENT2\",
              \"commit_url\": \"$COMMIT_URL\"
            }"

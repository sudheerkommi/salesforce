name: SF Environment Setup & Deployment

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: 'GitHub Environment name (e.g., sandbox, prod)'
        required: true
        type: string

jobs:
  sf-env-setup:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.Environment }}  # This sets the environment based on input

    env:
      ORGNAME: ${{ github.event.inputs.Environment }}
      USERNAME: ${{ vars.USERNAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.0.0"

      - name: Install Salesforce CLI
        run: |
          npm install -g @salesforce/cli@2.49.7
          sf --version

      - name: Install sfdx-git-delta Plugin
        run: echo 'y' | sf plugins install sfdx-git-delta
        
      - name: Check input environment exists
        run: |
          # Get all available environments from the repository
          AVAILABLE_ENVIRONMENTS=($(gh api repos/${{ github.repository }}/environments --jq '.environments[].name' | tr '\n' ' '))
          echo "Available environments: ${AVAILABLE_ENVIRONMENTS[@]}"
          
          # Check if the input environment exists in the available environments
          if [[ ! " ${AVAILABLE_ENVIRONMENTS[@]} " =~ " ${{ github.event.inputs.Environment }} " ]]; then
            echo "::error::Environment '${{ github.event.inputs.Environment }}' does not exist in this repository."
            echo "Available environments: ${AVAILABLE_ENVIRONMENTS[@]}"
            exit 1
          fi
          
          echo "✅ Environment '${{ github.event.inputs.Environment }}' exists."
                      
      - name: Authenticate with Salesforce using JWT
        run: |
          sf auth jwt grant \
            --client-id ${{ secrets.CONSUMER_KEY }} \
            --jwt-key-file ${GITHUB_WORKSPACE}/assets/devopskeys/server.key \
            --username ${{ env.USERNAME }} \
            --instance-url https://login.salesforce.com \
            --alias ${{ env.ORGNAME }}



      - name: Execute Apex Script and Capture JSON Output
        id: execute_apex
        run: |
          echo "Running Apex script on org: ${{ env.ORGNAME }}"
          result=$(sf apex run --file ${GITHUB_WORKSPACE}/scripts/test1.apex --target-org ${{ env.ORGNAME }} --json)
          echo "$result" > apex_output.json
          echo "Raw JSON Response:"
          cat apex_output.json

      - name: sf deploy metadata
        run: |
          echo "Deploying metadata to ${{ github.event.inputs.Environment }}..."
                    
          # Deploy metadata
          sf project deploy start --source-dir ${GITHUB_WORKSPACE}/SandboxRefreshEnvironments/production-sfp/force-app/main/default/customMetadata --target-org ${{ github.event.inputs.Environment }} --ignore-conflicts --json | tee deploy_result.json
          
          # Check for component failures even if command succeeded
          if [ $(jq -r '.status // "Failed"' deploy_result.json) == "Failed" ]; then
            echo "::warning::Deployment had component failures:"
            jq -r '.result.details.componentFailures[] | .problem' deploy_result.json 2>/dev/null || echo "Could not parse component failures."
          else
            echo "✅ Metadata deployment completed successfully"
          fi
          
          
